// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MANAGEMENT

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  phone     String?  @unique
  hashedPassword String
  role      UserRole
  isVerified Boolean @default(false)
  isActive   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctorProfile  DoctorProfile?
  physioProfile  PhysioProfile?
  patientProfile PatientProfile?

  referralsIssued       Referral[] @relation("DoctorReferrals")
  referralsReceived     Referral[] @relation("PatientReferrals")
  appointmentsAsDoc     Appointment[] @relation("DoctorAppointments")
  appointmentsAsPhysio  Appointment[] @relation("PhysioAppointments")
  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  
  services         Service[]
  availabilitySlots AvailabilitySlot[]
  
  paymentsReceived Payment[] @relation("PaymentReceiver")
  paymentsMade     Payment[] @relation("PaymentPayer")
  payouts          Payout[]
  
  documents    Document[]
  notifications Notification[]
  auditLogs    AuditLog[]

  @@map("users")
}

enum UserRole {
  PATIENT
  DOCTOR
  PHYSIO
  ADMIN
}

model DoctorProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  licenseNo    String  @unique
  specialties  String[]
  clinicName   String?
  clinicAddress String?
  
  consultationFee Decimal @default(500.00)
  isAvailableForConsult Boolean @default(true)
  
  bankName     String?
  accountNumber String?
  accountName  String?
  
  isLicenseVerified Boolean @default(false)
  licenseDocument   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_profiles")
}

model PhysioProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  licenseNo    String  @unique
  specialties  String[]
  
  offersClinicService Boolean @default(true)
  offersHomeService   Boolean @default(false)
  clinicAddress       String?
  serviceRadius       Int?
  
  bankName     String?
  accountNumber String?
  accountName  String?
  
  isLicenseVerified Boolean @default(false)
  licenseDocument   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("physio_profiles")
}

model PatientProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  dateOfBirth  DateTime?
  gender       Gender?
  address      String?
  
  emergencyContactName  String?
  emergencyContactPhone String?
  
  medicalHistory String?
  allergies      String?
  currentMedications String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_profiles")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Service {
  id          String  @id @default(cuid())
  providerId  String
  provider    User    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  duration    Int
  price       Decimal
  serviceType ServiceType
  
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  appointments Appointment[]

  @@map("services")
}

enum ServiceType {
  CLINIC
  HOME_VISIT
}

model AvailabilitySlot {
  id          String  @id @default(cuid())
  providerId  String
  provider    User    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  dayOfWeek   Int
  startTime   String
  endTime     String
  serviceType ServiceType
  
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("availability_slots")
}

model Referral {
  id          String    @id @default(cuid())
  patientId   String
  patient     User      @relation("PatientReferrals", fields: [patientId], references: [id])
  doctorId    String
  doctor      User      @relation("DoctorReferrals", fields: [doctorId], references: [id])
  
  diagnosis   String
  sessions    Int
  urgency     Urgency   @default(ROUTINE)
  serviceType ServiceType?
  notes       String?
  
  issuedAt    DateTime  @default(now())
  expiryDate  DateTime
  
  pdfUrl      String?
  documentHash String?
  qrCode      String?
  
  status      ReferralStatus @default(ACTIVE)
  sessionsUsed Int @default(0)
  
  appointments Appointment[]
  documents    Document[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("referrals")
}

enum Urgency {
  ROUTINE
  URGENT
  EMERGENCY
}

enum ReferralStatus {
  ACTIVE
  EXPIRED
  COMPLETED
  REVOKED
}

model Appointment {
  id          String  @id @default(cuid())
  
  patientId   String
  patient     User    @relation("PatientAppointments", fields: [patientId], references: [id])
  physioId    String
  physio      User    @relation("PhysioAppointments", fields: [physioId], references: [id])
  doctorId    String?
  doctor      User?   @relation("DoctorAppointments", fields: [doctorId], references: [id])
  
  referralId  String?
  referral    Referral? @relation(fields: [referralId], references: [id])
  serviceId   String
  service     Service @relation(fields: [serviceId], references: [id])
  
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  
  serviceType ServiceType
  location    String?
  
  status      AppointmentStatus @default(SCHEDULED)
  checkInTime DateTime?
  checkOutTime DateTime?
  noShowGracePeriod Int @default(15)
  
  physioNotes String?
  patientNotes String?
  
  payments Payment[]
  feeSplits FeeSplit[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  NO_SHOW
  CANCELLED
  RESCHEDULED
}

model Payment {
  id            String  @id @default(cuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  
  amount        Decimal
  currency      String @default("HKD")
  paymentMethod PaymentMethod
  
  payerId       String
  payer         User   @relation("PaymentPayer", fields: [payerId], references: [id])
  receiverId    String
  receiver      User   @relation("PaymentReceiver", fields: [receiverId], references: [id])
  
  stripePaymentIntentId String?
  stripeChargeId        String?
  
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  refundedAt    DateTime?
  refundAmount  Decimal?
  
  feeSplits     FeeSplit[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

enum PaymentMethod {
  STRIPE_CARD
  FPS
  PAYME
  ALIPAY_HK
  WECHAT_PAY
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model FeeSplit {
  id            String  @id @default(cuid())
  paymentId     String
  payment       Payment @relation(fields: [paymentId], references: [id])
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  
  totalAmount     Decimal
  referralFee     Decimal
  physioFee       Decimal
  platformFee     Decimal @default(0)
  
  doctorId        String?
  physioId        String
  
  createdAt DateTime @default(now())

  @@map("fee_splits")
}

model Payout {
  id          String  @id @default(cuid())
  providerId  String
  provider    User    @relation(fields: [providerId], references: [id])
  
  amount      Decimal
  currency    String @default("HKD")
  type        PayoutType
  
  stripeTransferId String?
  
  status      PayoutStatus @default(PENDING)
  processedAt DateTime?
  
  periodStart DateTime
  periodEnd   DateTime
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payouts")
}

enum PayoutType {
  REFERRAL_FEE
  SERVICE_FEE
  REFUND
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Document {
  id          String  @id @default(cuid())
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id])
  
  type        DocumentType
  fileName    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  
  hash        String?
  isVerified  Boolean @default(false)
  
  referralId  String?
  referral    Referral? @relation(fields: [referralId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

enum DocumentType {
  REFERRAL
  CONSENT_FORM
  MEDICAL_REPORT
  EXERCISE_PLAN
  INVOICE
  LICENSE
  IDENTIFICATION
}

model Notification {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  
  type        NotificationType
  channel     NotificationChannel
  title       String
  message     String
  data        Json?
  
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  readAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  PAYMENT_CONFIRMATION
  REFERRAL_ISSUED
  NO_SHOW_ALERT
  FOLLOW_UP_REMINDER
  SYSTEM_ANNOUNCEMENT
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  IN_APP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}

model AuditLog {
  id          String  @id @default(cuid())
  actorId     String?
  actor       User?   @relation(fields: [actorId], references: [id])
  
  action      String
  entityType  String
  entityId    String?
  
  beforeData  Json?
  afterData   Json?
  
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  
  timestamp DateTime @default(now())

  @@map("audit_logs")
}
